plugins {
	id 'fabric-loom' version '1.3-SNAPSHOT' apply false
	id 'maven-publish'
	id 'java'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

archivesBaseName = project.archives_base_name
version = project.mod_version //+ "+" + (ENV.GITHUB_RUN_NUMBER ? "" : "local-") + getBranch()
group = project.maven_group

def getBranch() {
	def ENV = System.getenv()
	if (ENV.GITHUB_REF) {
		def branch = ENV.GITHUB_REF
		return branch.substring(branch.lastIndexOf("/") + 1)
	}

	if (grgit == null) {
		return "unknown"
	}

	def branch = grgit.branch.current().name
	return branch.substring(branch.lastIndexOf("/") + 1)
}

subprojects {
	apply plugin: "fabric-loom"
	apply plugin: "maven-publish"

	version = "${project.module_version}-${project.minecraft_version}"
	group = rootProject.maven_group
	if (project.hasProperty("archive_base_name")){
		archivesBaseName = project.archive_base_name
	}

	repositories {
		// Add repositories to retrieve artifacts from in here.
		// You should only use this when depending on other mods because
		// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
		// See https://docs.gradle.org/current/userguide/declaring_repositories.html
		// for more information about repositories.
		maven {
			url "https://maven.terraformersmc.com"
			content {
				includeGroup "com.terraformersmc"
			}
		}
		maven {
			name = "parchment"
			url = uri("https://maven.parchmentmc.org")
		}
		maven { url 'https://jitpack.io' }
	}

	sourceSets {
		testmod {
			compileClasspath += main.compileClasspath
			runtimeClasspath += main.runtimeClasspath
		}
	}

	loom {
		runs {
			testmodClient {
				client()
				ideConfigGenerated project.rootProject == project
				name = "Testmod Client"
				source sourceSets.testmod
			}
			testmodServer {
				server()
				ideConfigGenerated project.rootProject == project
				name = "Testmod Server"
				source sourceSets.testmod
			}
		}
	}

	dependencies {
		// To change the versions see the gradle.properties file
		minecraft "com.mojang:minecraft:${project.minecraft_version}"
		if(project.mojmap.toBoolean()){
			mappings loom.layered() {
				officialMojangMappings()
				//parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_version}@zip")
			}
		} else {
			mappings "net.fabricmc:yarn:${project.minecraft_version}+${project.yarn_mappings}:v2"
		}

		modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

		// Fabric API. This is technically optional, but you probably want it anyway.
		modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}+${project.minecraft_version}"
		modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
		if (project.mixin_extras.toBoolean()){
			include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.2.0-rc.2")))
		}
	}

	processResources {
		inputs.property "version", project.version

		filesMatching("fabric.mod.json") {
			expand "version": project.version
		}
	}

	tasks.withType(JavaCompile).configureEach {
		// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	}

	java {
		// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
		// if it is present.
		// If you remove this line, sources will not be generated.
		withSourcesJar()
	}

	jar {
		from("LICENSE") {
			rename { "${it}_${project.archivesBaseName}"}
		}
	}

// configure the maven publication
	publishing {
		publications {
			mavenJava(MavenPublication) {
				if (project.hasProperty("archive_base_name")){
					artifactId = project.archive_base_name
				}
				artifact(remapJar) {
					builtBy(remapJar)
				}

				artifact(remapSourcesJar) {
					builtBy remapSourcesJar
				}
			}
		}

		setupRepositories(repositories)
	}
}

void setupRepositories(RepositoryHandler repositories) {
	//repositories.mavenLocal() // uncomment for testing
	def ENV = System.getenv()
	repositories.maven {
		url "https://repo.repsy.io/mvn/distant/feltmc"
		if (ENV.GITHUB_ACTION) {
			credentials {
				username ENV.MAVEN_USERNAME
				password ENV.MAVEN_PASSWORD
			}
		}
	}
}
